package korolev.qa;

public class FirstClass {

    // Примитивные типы данных
    byte aByte; // 8 bit -128 ... 127
    short aShort = 100 ; // 16 bit -32768 ... 32767
    int aInt = 1_100_000; // 32 bit -2 ^ 31 ... (2 ^ 31) -1  // самый используемый
    long aLong = 100L; // 64 bit -2 ^ 63 ... (2 ^ 63) -1

    float aFloat = 0.0F; // 32 bit
    double aDouble = 0.0D; // 64 bit   // самый используемый (если просто хранить, но не использовать арифметику)

    char aChar = 'c';
    boolean aBoolean = false;

    // Ссылочный тип данных
    String aString = "hello, korolev.qa!";

    public static void main(String[] args) {
        // + -- сложение cкладывает значения по обе стороны от оператора
        // - -- вычитание Вычитает правый операнд из левого операнда
        // * -- умножение Умножает значения по обе стороны от оператора
        // / -- целочисленное деление Оператор деления делит левый операнд на правый операнд
        // % -- остаток от деления Делит левый операнд на правый операнд и возвращает остаток
        // инкремент ++ увеличивает значение операнда на 1
        // декремент -- уменьшает значение операнда на 1

        // > Проверяет, является ли значение левого операнда больше,
        // чем значение правого операнда, если да, то условие становится истинным
        // < Проверяет, является ли значение левого операнда меньше,
        // чем значение правого операнда, если да, то условие становится истинным
        // >= Проверяет, является ли значение левого операнда больше или равно
        // значению правого операнда, если да, то условие становится истинным
        // <= Проверяет, если значение левого операнда меньше или равно
        // значению правого операнда, если да, то условие становится истинным
        // == Проверяет, равны или нет значения двух операндов, если да, то условие становится истинным
        // != Проверяет, равны или нет значения двух операндов, если значения не равны, то условие становится истинным

        // = Простой оператор присваивания, присваивает значения из правой стороны операндов к левому операнду
        // += Оператор присваивания Добавления, он присваивает левому операнду значения правого
        // -= Оператор присваивания Вычитания, он вычитает из правого операнда левый операнд

        // && (&)
        // || (|)
        // !

        byte b = 4;
        int i = 7, k = 89;
        long l = 40_000_000_000L;

        // b = b + 130; переполнение типа byte
        // k = k - 3000000000; переполнение типа int

        System.out.println(l + i);
        System.out.println(k - i);
        System.out.println(k * i);
        System.out.println(k / i);
        System.out.println(k++);
        System.out.println(++i);
        System.out.println(--i);
        System.out.println(i--);

        System.out.println((k + i) > (i - k));
        System.out.println((k + i) >= (i - k));
        System.out.println((k + i) < (i - k));
        System.out.println((k + i) <= (i - k));
        System.out.println((k + i) == (i - k));
        System.out.println((k + i) == (k + i));
        System.out.println((k + i) != (k - i));
        System.out.println((k + i) != (k + i));

        System.out.println(i += k);
        System.out.println(k -= i);

        float f = 0.9F;
        double d = 4.45;

        System.out.println(((f - d) > 0) && ((d - f) > 0));
        System.out.println(((f - d) > 0) || ((d - f) > 0));
        System.out.println(d / f);
        System.out.println(d % f);

        char c = 'q', t = 'a';
        boolean bol = false;

        System.out.println(c + t); // char + char
        System.out.println(!bol);

        boolean result = (3 < 4) || false;

        Book testirovanie = new Book();
        testirovanie.doReadBook();

    }

}
